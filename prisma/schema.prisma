generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String        @unique
  email               String         @unique
  password_hash       String
  interface_language_id Int?
  created_at      DateTime @default(now())
  dailyGoal           Int           @default(20)
  fsrsParams          Json?         @default("{}")
  currentStreak       Int           @default(0)
  maxStreak           Int           @default(0)
  lastStreakUpdate    DateTime?
  modules        Module[]
  reviews         ReviewLog[]
  stats             DailyStats[]
  role                UserRole      @default(USER)
  isBlocked           Boolean       @default(false)
}

model Language {
  id        Int     @id @default(autoincrement())
  code      String  @unique
  name      String
  iconUrl   String?
  modules   Module[]
}

model Module {
  id           Int      @id @default(autoincrement())
  user_id      Int
  language_id  Int
  title        String
  description  String?
  created_at   DateTime @default(now())
  
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  language     Language @relation(fields: [language_id], references: [id])
  cards        Card[]
  dailyStats   DailyStats[]

  @@index([user_id])
  @@index([language_id])
}

model Card {
  id             Int      @id @default(autoincrement())
  module_id      Int
  front_text     String
  back_text      String
  created_at     DateTime @default(now())

  module         Module @relation(fields: [module_id], references: [id], onDelete: Cascade)
  examples       Example[]
  schedule       CardSchedule?
  reviewLogs     ReviewLog[]

  @@unique([module_id, front_text])
  @@index([module_id])
}

model Example {
  id               Int     @id @default(autoincrement())
  card_id          Int
  example_text     String
  translation_text String?
  example_order    Int     @default(1)

  card            Card @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@unique([card_id, example_order])
  @@index([card_id])
}

enum CardStatus {
  new
  learning
  review
  mastered
}

model CardSchedule {
  card_id        Int       @id
  last_review    DateTime?
  due_date       DateTime?
  stability      Float     @default(0)
  difficulty     Float     @default(0)
  review_count   Int       @default(0)
  lapses         Int       @default(0)
  status         CardStatus @default(new)
  learning_step  Int       @default(0)
  
  consecutiveGoodCount Int  @default(0)
  lastAnsweredGoodDate DateTime?

  card           Card @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@index([due_date])
}

enum ReviewRating {
  again
  hard
  good
  easy
}

model ReviewLog {
  id                Int        @id @default(autoincrement())
  user_id           Int
  card_id           Int
  review_date      DateTime @default(now())
  state            CardStatus @default(review)
  rating           ReviewRating
  next_review_date DateTime?
  countsTowardsGoal Boolean  @default(false)

  user            User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  card            Card @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@index([user_id, review_date])
  @@index([card_id])
  @@index([state])
}

model DailyStats {
  user_id        Int
  module_id      Int
  stat_date      DateTime @db.Date
  new_cards      Int @default(0)
  repeated_cards Int @default(0)
  learned_cards  Int @default(0)
  known_cards    Int @default(0)

  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module         Module @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@id([user_id, module_id, stat_date])
  @@index([stat_date])
}

enum UserRole {
  USER
  ADMIN
}
